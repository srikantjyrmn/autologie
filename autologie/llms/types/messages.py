"""Dataclasses for messages"""

from typing import Dict, List, Union, Literal, TypedDict, Optional
from enum import auto
from functools import cached_property
from pydantic import BaseModel, Field, computed_field
from strenum import LowercaseStrEnum


class Roles(LowercaseStrEnum):
    """base enum class for a Role in a ChatMessage"""
    USER = auto()
    SYSTEM = auto()
    TOOL = auto()
    ASSISTANT = auto()

class ChatMessageDict(TypedDict):
    """A typed dict to represent the message sent to a ChatModel.
    #Deprecated
    """
    role : Literal['user', 'system', 'assistant', 'tool']
    content: str
    images: List = []

class ChatMessage(BaseModel):
    """Base class for a ChatMessage."""
    role: Roles
    content: str = Field(description="""Text content of a Message.
                        For Ollama, this is called prompt.""")
    images: List[str] = []

    @computed_field
    @cached_property
    def message_dict(self) -> Dict:
        """Dict for a Chat Message"""
        message_dict = self.__dict__.copy()
        #message_dict.pop('message_dict')
        message_dict['role'] = message_dict['role'].value
        return message_dict

class UserMessage(ChatMessage):
    """Bse class for a UserMessage: a user sent message to a ChatEndpoint"""
    role: Roles = Roles.USER
    content: str
    images: List[str] = []

class SystemMessage(ChatMessage):
    """Chat message with Role System. Cannot have images."""
    role: Roles = Roles.SYSTEM
    content: str

class OpenaiToolFormat(BaseModel):
    """#TODO"""
    tools: None | List = None
    tool_choice: None | Literal['auto', 'required'] = None


class FunctionDefinition(BaseModel):
    """Base Class for a function definition."""
    name: str
    description: Optional[str] = None
    parameters: Optional[Dict[str, object]] = None

class FunctionSignature(BaseModel):
    """Base Class for a function Signature"""
    type: Literal["function"]
    function: FunctionDefinition

class AssistantMessage(ChatMessage):
    """ChatMessage with role Assistant"""
    role: Roles = Roles.ASSISTANT
    content: None | str
    tool_calls: None | List[FunctionSignature] = None
    objects: None | List[object] = None

class ToolMessage(ChatMessage):
    """Chat Message with Role Tool. #TODO:Can this have images?"""
    role: Roles = Roles.TOOL
    content: str

class FunctionCallMessage(BaseModel):
    """Base class for a FunctionCall Message generated by a Language Model."""
    name: str
    """The name of the function to call."""
    arguments: dict
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """

class ChatHistory(BaseModel):
    messages: List[Union[UserMessage, AssistantMessage, ToolMessage, SystemMessage]] = []
