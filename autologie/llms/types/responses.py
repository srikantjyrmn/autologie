"""Dataclasses for Responses and Response Formats"""
from datetime import datetime
from typing import List, Optional, Union, Literal, Any
from enum import auto
from functools import cached_property
from pydantic import BaseModel, Field, computed_field
from strenum import LowercaseStrEnum
from .messages import (
    AssistantMessage, FunctionSignature, Roles, FunctionCallMessage
)

class ResponseStats(BaseModel):
    """Tokens and time used"""
    prompt_tokens: Optional[int] = None
    completion_tokens: Optional[int] = None
    total_tokens: Optional[int] = None
    total_duration: Optional[int] = None
    load_duration: Optional[int] = None
    prompt_eval_duration: Optional[int] = None
    eval_count: Optional[int] = None
    eval_duration: Optional[int] = None

class CompletionApiChoice(BaseModel):
    """Choice for completion API"""
    text: str
    logprobs: Optional[float] = None
    finish_reason: str

    @computed_field
    @cached_property
    def message(self)-> AssistantMessage:
        """message of the response text"""
        return AssistantMessage(content=self.text)

class CompletionApiResponse(BaseModel):
    """Completion Model Response."""
    model: str
    created_at :datetime = Field(alias="created")
    choices : List[CompletionApiChoice]
    usage: ResponseStats

class ChatApiChoice(BaseModel):
    """Choice for Chat API"""
    message: AssistantMessage
    logprobs: Optional[float] = None
    finish_reason: str
    @computed_field
    @cached_property
    def text(self)->str:
        """text of the response message"""
        return self.message.content

class ChatApiResponse(BaseModel):
    """Chat Model Response, in OpenAI format."""
    model: str
    created_at :datetime = Field(alias='created')
    choices : List[ChatApiChoice]
    usage: ResponseStats

class ResponseMode(LowercaseStrEnum):
    """
    Enum for defining different types of structured outputs that can be generated by a Language Model.
    """
    UNSTRUCTURED = auto()
    JSON = auto()
    PYDANTIC = auto()
    TOOL_CALL = auto()
    PARALLEL_TOOL_CALL = auto()

class OpenaiResponseFormat(BaseModel):
    """Chat Completion Response Format"""
    type: Literal['text', 'json_object', 'single_function_call']
    schema: Union[int, str, bool, List, object, None]=None

class ResponseToolSpec(BaseModel):
    """ToolSpec in ResponseSpec"""
    tools: List[FunctionSignature]
    tool_choice: None | str = None

class ResponseSpec(BaseModel):
    """Class to specify ResponseMode."""
    response_format: None | OpenaiResponseFormat = None
    tools: None| List[FunctionSignature] = None
    use_grammar: bool = False

    @computed_field
    @cached_property
    def response_mode(self) -> str:
        """Gets the response mode from the response format and tools spec provided."""
        if (not self.response_format) and (not self.tools):
            return 'default'
        if self.tools:
            return 'function_calling'
        if self.response_format:
            return 'json'
        return 'default'

class ApiResponseValidation(BaseModel):
    """Object to hold completion validation info
    """
    validation: bool = True
    get_feedback: bool = False
    error_message: None | str = None
    assistant_message: None | str
    tool_calls: None | List[FunctionCallMessage] | Any = None
    objects: None | List[object] = None

class ApiResponseMessage(BaseModel):
    """A ChatMessage type object for an ApiResponse Message."""
    role: Roles.ASSISTANT
    content: str
    objects: List[object]
    tool_call: List[FunctionCallMessage]
    validated: bool
    error_message: None | str = None

class ApiResponse(BaseModel):
    """Class to define the object returned by an API call to ApiClient"""
    model: str
    created_at: datetime
    choices: List[ApiResponseMessage]
    usage: ResponseStats

class OllamaCompletionResponse(BaseModel):
    """Dataclass for a completion response from Ollama."""
    model:str
    response:str
    created: datetime =Field(alias = 'created_at')
    done:bool
    done_reason:str
    total_duration: int
    load_duration:int
    prompt_eval_duration : int 
    eval_count:int
    eval_duration:int

    @computed_field
    @cached_property
    def response_object(self) -> CompletionApiResponse:
        """Response object from Ollama COmpletion endpoint.
        """
        return CompletionApiResponse(
            model = self.model,
            created=self.created,
            choices = [CompletionApiChoice(
                text = self.response,
                logprobs = 0,
                finish_reason=self.done_reason
            )],
            usage = ResponseStats(**self.__dict__)
        )

class OllamaChatResponse(BaseModel):
    """Response from Ollama Chat API. 
    response_object returns the same response in ChatApiResponse object."""
    model:str
    object:str
    created: datetime
    choices: List
    done:bool
    done_reason:bool

    @computed_field
    @cached_property
    def response_object(self) -> ChatApiResponse:
        """Returns the ChatApiResponseObject for this Ollama Chat response.
        Is called by the ResponseValidator class."""
        return ChatApiResponse(
            model = self.model,
            created_at=self.created,
            choices = [ChatApiChoice(
                message = self.message,
                logprobs = 0,
                finish_reason=self.done_reason
            )],
            usage = ResponseStats(**self)
        )
